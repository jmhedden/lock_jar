{"name":"Lock jar","tagline":"LockJar manages Java Jars for Ruby","google":"UA-34340702-2","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# LockJar\r\n\r\nLockJar manages Java Jars for Ruby. Powered by [Naether](https://github.com/mguymon/naether) to\r\n create a frankenstein of Bundler and Maven. A Jarfile ([example](https://github.com/mguymon/lock_jar/blob/master/spec/Jarfile)) is used to generate a Jarfile.lock that contains all the resolved jar dependencies. The Jarfile.lock can be used to populate the classpath.\r\n\r\nLockJar can:\r\n* Be Use directly in MRI 1.8.7, 1.9.3, and JRuby 1.6.7, 1.6.8\r\n* From the [command line](https://github.com/mguymon/lock_jar/blob/master/README.md#command-line)\r\n* [Triggered from a Gem install](https://github.com/mguymon/lock_jar/blob/master/README.md#gem-integration)\r\n* [Integrated into Buildr](https://github.com/mguymon/lock_jar/blob/master/README.md#buildr-integration)\r\n* Experimental [tntegration with Bundler](https://github.com/mguymon/lock_jar/blob/master/README.md#bundler-integration)\r\n\r\nhttps://github.com/mguymon/lock_jar\r\n\r\n[RDoc](http://rubydoc.info/gems/lock_jar/frames)\r\n\r\n## Install\r\n\r\n    gem install lock_jar\r\n\r\n## Ruby Usage\r\n\r\nJRuby is natively supported. Ruby 1.8.7 and 1.9.3 uses [Rjb](http://rjb.rubyforge.org/) to proxy over JNI.\r\n\r\n### Jarfile\r\n\r\nA Jarfile is a simple file using a Ruby DSL for defining a project's dependencies using the following \r\nmethods:\r\n\r\n* **local_repo( path )**: Set the local Maven repository, this were dependencies are downloaded to. \r\n* **remote_repo( url )**: Add additional url of remote Maven repository.\r\n* **group( groups )**: Set the group for nested jar or pom. A single or Array of groups can be set.\r\n* **jar( notations, opts = {} )**: Add Jar dependency in artifact notation, artifact:group:version as the bare minimum. A single or Array of notations can be passed. Default group is _default_, can be specified by setting _opts = { :group => ['group_name'] }_\r\n* **pom( pom_path, opts = {} )**: Add a local Maven pom, default is to load dependencies for `runtime` and `compile` scopes. To select the scopes to be loaded from the pom, set the _opts = { :scopes => ['test'] }_\r\n\r\n#### Example Jarfile\r\n\r\n    repository 'http://repository.jboss.org/nexus/content/groups/public-jboss'\r\n  \t\r\n    // Default group is default\r\n    jar \"org.apache.mina:mina-core:2.0.4\"\r\n  \r\n    group 'runtime' do\r\n      jar 'org.apache.tomcat:servlet-api:jar:6.0.35'\r\n    end\r\n  \r\n    group 'test' do\r\n      jar 'junit:junit:jar:4.10', :group => 'test'\r\n    end\r\n\t\r\n### Resolving dependencies\r\n\r\n**LockJar.lock( *args )**: Using a Jarfile, creates a lock file. Depending on the type of arg, a different configuration is set.\r\n* _[String]_ will set the Jarfile path, e.g. `'/somewhere/Jarfile.different'`. Default jarfile is `'Jarfile'`\r\n* _[Hash]_ will set the options, e.g. `{ :local_repo => 'path' }`\r\n  * **:download** _[Boolean]_ if true, will download jars to local repo. Defaults to true.\r\n  * **:local_repo** _[String]_ sets the local repo path. Defaults to `ENV['M2_REPO']` or `'~/.m2/repository'`\r\n  * **:lockfile** _[String]_ sets the Jarfile.lock path. Default lockfile is `'Jarfile.lock'`.\r\n\r\nWhen the Jarfile is locked, the transitive dependencies are resolved and saved to the Jarfile.lock file.\r\n\r\nExample of locking a Jarfile to a Jarfile.lock\r\n\r\n    LockJar.lock\r\n  \r\n \r\n### Jarfile.lock\r\n\r\nThe _Jarfile.lock_ generated is a YAML file containing information on how to handle the classpath for grouped dependencies and their nested transitive dependencies.\r\n\r\n#### The Jarfile.lock\r\n    \r\n    ---\r\n    version: 0.7.0\r\n    groups:\r\n      default:\r\n        dependencies:\r\n        - ch.qos.logback:logback-classic:jar:0.9.24\r\n        - ch.qos.logback:logback-core:jar:0.9.24\r\n        - com.metapossum:metapossum-scanner:jar:1.0\r\n        - com.slackworks:modelcitizen:jar:0.2.2\r\n        - commons-beanutils:commons-beanutils:jar:1.8.3\r\n        - commons-io:commons-io:jar:1.4\r\n        - commons-lang:commons-lang:jar:2.6\r\n        - commons-logging:commons-logging:jar:1.1.1\r\n        - junit:junit:jar:4.7\r\n        - org.apache.mina:mina-core:jar:2.0.4\r\n        - org.slf4j:slf4j-api:jar:1.6.1\r\n        artifacts:\r\n        - jar:org.apache.mina:mina-core:jar:2.0.4:\r\n            transitive:\r\n              org.slf4j:slf4j-api:jar:1.6.1: {}\r\n        - pom:spec/pom.xml:\r\n            scopes:\r\n            - runtime\r\n            - compile\r\n            transitive:\r\n              com.metapossum:metapossum-scanner:jar:1.0:\r\n                junit:junit:jar:4.7: {}\r\n                commons-io:commons-io:jar:1.4: {}\r\n              commons-beanutils:commons-beanutils:jar:1.8.3:\r\n                commons-logging:commons-logging:jar:1.1.1: {}\r\n              ch.qos.logback:logback-classic:jar:0.9.24:\r\n                ch.qos.logback:logback-core:jar:0.9.24: {}\r\n              commons-lang:commons-lang:jar:2.6: {}\r\n      development:\r\n        dependencies:\r\n        - com.typesafe:config:jar:0.5.0\r\n        artifacts:\r\n        - jar:com.typesafe:config:jar:0.5.0:\r\n            transitive: {}\r\n      test:\r\n        dependencies:\r\n        - junit:junit:jar:4.10\r\n        - org.hamcrest:hamcrest-core:jar:1.1\r\n        artifacts:\r\n        - jar:junit:junit:jar:4.10:\r\n            transitive:\r\n              org.hamcrest:hamcrest-core:jar:1.1: {}\r\n    ...\r\n\r\n  \r\n  \r\n### Accessing Jars\r\n**LockJar.install(*args)**: Download Jars in the Jarfile.lock\r\n* _[String]_ will set the Jarfile.lock path, e.g. `'Better.lock'`. Default lock file is `'Jarfile.lock'`.\r\n* _[Array<String>]_ will set the groups, e.g. `['compile','test']`. Defaults group is _default_.\r\n* _[Hash]_ will set the options, e.g. `{ :local_repo => 'path' }`\r\n  * **:local_repo** _[String]_ sets the local repo path. Defaults to `ENV['M2_REPO']` or `'~/.m2/repository'`\r\n  \r\n**LockJar.list(*args)**: Lists all dependencies as notations for groups from the Jarfile.lock.  Depending on the type of arg, a different configuration is set.  \r\n* _[String]_ will set the Jarfile.lock path, e.g. `'Better.lock'`. Default lock file is `'Jarfile.lock'`.\r\n* _[Array<String>]_ will set the groups, e.g. `['default', 'runtime']`. Defaults group is _default_.\r\n* _[Hash]_ will set the options, e.g. `{ :local_repo => 'path' }`\r\n  * **:local_repo** _[String]_ sets the local repo path. Defaults to `ENV['M2_REPO']` or `'~/.m2/repository'`\r\n  * **:local_paths** _[Boolean]_ converts the notations to paths of jars in the local repo\r\n  * **:resolve** _[Boolean]_ to true will make transitive dependences resolve before returning list of jars\r\n  \r\n**LockJar.load(*args)**: Loads all dependencies to the classpath for groups from the Jarfile.lock. Default group is _default_. Default lock file is _Jarfile.lock_.\r\n* _[String]_ will set the Jarfile.lock, e.g. `'Better.lock'`\r\n* _[Array<String>]_ will set the groups, e.g. `['default', 'runtime']`\r\n* _[Hash]_ will set the options, e.g. `{ :local_repo => 'path' }`\r\n  * **:local_repo** _[String]_ sets the local repo path\r\n  * **:resolve** _[Boolean]_ to true will make transitive dependences resolve before loading to classpath \r\n\r\nOnce a _Jarfile.lock_ is generated, you can list all resolved jars by\r\n  \r\n    jars = LockJar.list\r\n  \r\nor directly load all Jars into the classpath\r\n  \r\n    jars = LockJar.load  \r\n\r\nDo not forget, if you change your _Jarfile_, you have to re-generate the _Jarfile.lock_.\r\n  \r\nSee also [loading Jars into a custom ClassLoader](https://github.com/mguymon/lock_jar/wiki/ClassLoader).\r\n\r\n### Shortcuts\r\n\r\n#### Skipping the Jarfile\r\n\r\nYou can skip the _Jarfile_ and _Jarfile.lock_ to directly play with dependencies by passing a block to _LockJar.lock_, _LockJar.list_, and _LockJar.load_\r\n\r\n#### Lock without a Jarfile\r\n\r\n    LockJar.lock do\r\n      jar 'org.eclipse.jetty:example-jetty-embedded:jar:8.1.2.v20120308'\r\n    end\r\n\r\n#### List without a Jarfile.lock\r\n    \r\n    LockJar.list do\r\n      jar 'org.eclipse.jetty:example-jetty-embedded:jar:8.1.2.v20120308'\r\n    end\r\n\r\n#### Load without a Jarfile.lock\r\n    \r\n    LockJar.load do\r\n      jar 'org.eclipse.jetty:example-jetty-embedded:jar:8.1.2.v20120308'\r\n    end\r\n\r\nSince you skipped the locking part, mostly likely you will need to resolve the dependences in the block, just pass the _:resolve => true_ option to enable dependency resolution (also works for _LockJar.list_).\r\n\r\n    LockJar.load( :resolve => true ) do\r\n      jar 'org.eclipse.jetty:example-jetty-embedded:jar:8.1.2.v20120308'\r\n    end\r\n\r\n## Command line\r\n\r\nThere is a simple command line helper. You can lock a _Jarfile_ with the following command\r\n\r\n    lockjar lock\r\n\r\nList jars in a _Jarfile.lock_ with \r\n \r\n    lockjar list\r\n  \r\nDownload all jars in a _Jarfile.lock_ with\r\n\r\n    lockjar install\r\n  \r\n_lockjar_ _--help_ will give you list of all commands and their options.\r\n\r\n## Gem Integration\r\n\r\n### Installing Jars with a Gem\r\n\r\nLockJar can be triggered when a Gem is installed by using a [Gem extension](http://docs.rubygems.org/read/chapter/20#extensions)\r\nof type _Rakefile_. The cavaet is the task to install the jars must be the default for the Rakefile.\r\n\r\nA Gem spec with _Rakefile_ extension:\r\n\r\n    Gem::Specification.new do |s|\r\n      s.extensions = [\"Rakefile\"]\r\n    end\r\n\r\nRakefile with default to install Jars using LockJar:\r\n\r\n    task :default => :prepare\r\n\r\n    task :prepare do\r\n      require 'lock_jar'\r\n      \r\n      # get jarfile relative the gem dir\r\n      lockfile = File.expand_path( \"../Jarfile.lock\", __FILE__ ) \r\n      \r\n      LockJar.install( :lockfile => lockfile )\r\n    end\r\n    \r\n#### Work around for Rakefile default\r\n\r\nThe downside of using the Gem extension Rakefile is it requires the default to \r\npoint at the task to download the jars (from the example Rakefile, \r\n`task :default => :prepare`). To get around this, I used a Rakefile called \r\n_PostInstallRakefile_ to handle the `task :prepare`. When packaging the gem, _PostInstallRakefile_ is\r\nrenamed to `Rakefile`.\r\n\r\n### Manually installing Jars\r\n\r\nInstead of rely in a Rakefile to install Jars when the Gem is installed, Jars can be manually installed. The following\r\nRuby needs to be called before calling `LockJar.load`. Only Jars that are missing are downloaded.\r\n\r\n      #get jarfile relative the gem dir\r\n      lockfile = File.expand_path( \"../Jarfile.lock\", __FILE__ ) \r\n      \r\n      # Download any missing Jars\r\n      LockJar.install( lockfile )\r\n\r\n### Loading\r\n\r\nWith the Jars installed, loading the classpath for the Gem is simple. \r\nAs part of the load process for the Gem (an entry file that is required, etc) use the following:\r\n\r\n      #get jarfile relative the gem dir\r\n      lockfile = File.expand_path( \"../Jarfile.lock\", __FILE__ ) \r\n      \r\n      # Loads the ClassPath with Jars from the lockfile\r\n      LockJar.load( :lockfile => lockfile )\r\n\r\nSee also [loading Jars into a custom ClassLoader](https://github.com/mguymon/lock_jar/wiki/ClassLoader).\r\n\r\n## Buildr Integration\r\n\r\nLockJar integrates with [Buildr](http://buildr.apache.org/) using an [Addon](https://github.com/mguymon/lock_jar/blob/master/lib/lock_jar/buildr.rb). This allows the Jarfile to be defined directly into a _buildfile_. A global LockJar definition can be set and is inherited to all projects. Each project may have its own LockJar definition. A lock file is generated per project based on the project name.\r\n\r\nA new Buildr task is added to generate the lockfile for all projects\r\n\r\n    buildr lock_jar:lock\r\n  \r\nand a task per project to generate the lockfile for a single project\r\n\r\n    buildr <app>:<project>:lock_jar:lock\r\n\r\nIn a project, you can access an Array of notations using the **lock_jars** method, accepts same parameters as [LockJar.list](https://github.com/mguymon/lock_jar#accessing-jars)\r\n\r\n    lock_jars()\r\n\r\n\r\nThe _default_ group dependencies are automatically added to the classpath for compiling. The _test_ group dependencies are automatically added to the classpath for tests. Do not forget, if you change the LockJar definitions, you have to rerun the **lock_jar:lock** task.\r\n\r\n\r\n### Example\r\n\r\nSample buildfile with LockJar\r\n\r\n    require 'lock_jar/buildr'\r\n    \r\n    # app definition, inherited into all projects\r\n    lock_jar do\r\n\r\n         group 'test' do\r\n           jar 'junit:junit:jar:4.10'\r\n         end\r\n    end\r\n\r\n    define 'app' do\r\n\r\n       def 'project1' do\r\n         lock_jar do\r\n           jar  \"org.apache.mina:mina-core:2.0.4\"\r\n         end\r\n       end\r\n\r\n       def 'project2' do\r\n          lock_jar do\r\n            pom 'pom.xml'\r\n          end\r\n       end\r\n\r\n    end\r\n\r\nGenerated the following lock files using **lock_jar:lock**\r\n\r\n* _project1.lock_ - contains _junit_ and _mina_ jars.\r\n* _project2.lock_ - contains _junit_ and _pom.xml_ jars.\r\n  \r\n## Bundler Integration\r\n\r\nBundler integration is **experimental** right now. [LockJar patches Bundler](https://github.com/mguymon/lock_jar/blob/master/lib/lock_jar/bundler.rb) \r\nto allow creation of a _Jarfile.lock_ when Bundler calls `install` and `update`. The dependencies from the _Jarfile.lock_ are automatically loaded when\r\nBundler  calls `setup` and `require`. To enable this support, add this require to your _Gemfile_\r\n\r\n    require 'lock_jar/bundler'\r\n\r\nYou can optionally create a _Jarfile_ that will automatically be included when you `bundle install` or `bundle update`. Otherwise\r\nGems with a Jarfile will be merge to generate a _Jarfile.lock_. The Jarfile.lock will be loaded when Bundler calls `setup` or `require`.\r\n\r\n### Bundler to LockJar groups\r\n\r\nLockJar will merge the dependencies from the `default` and `runtime` group of a Gem's _Jarfile_. These will be placed in the \r\nlockfile under Gem's corresponding Bundler group. For example, the following Gemfile:\r\n\r\n    group :development do\r\n      gem 'solr_sail', '~>0.1.0'\r\n    end\r\n\r\nWould produce the follow _Jarfile.lock_ excerpt:\r\n\r\n    ---\r\n    version: 0.7.0\r\n    merged:\r\n    - gem:solr_sail:gems/solr_sail-0.1.0-java/Jarfile\r\n    groups:\r\n      default:\r\n        dependencies: []\r\n        artifacts: []\r\n      development:\r\n        dependencies:\r\n         - ch.qos.logback:logback-classic:jar:1.0.6\r\n         - ch.qos.logback:logback-core:jar:1.0.6\r\n         - com.google.guava:guava:jar:r05\r\n\r\nSince `solr_sail` is defined in the _Gemfile's_ `development` group, the corresponding _Jarfile.lock_ dependencies are also under the `development` group.\r\n      \r\n## License\r\n\r\nLicensed to the Apache Software Foundation (ASF) under one or more\r\ncontributor license agreements.  See the NOTICE file distributed with this\r\nwork for additional information regarding copyright ownership.  The ASF\r\nlicenses this file to you under the Apache License, Version 2.0 (the\r\n\"License\"); you may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n  http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\r\nWARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\r\nLicense for the specific language governing permissions and limitations under\r\nthe License.\r\n\r\n"}